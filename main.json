{
    "name": "bruno-testbench",
    "version": "1",
    "items": [
      {
        "type": "http",
        "name": "ping",
        "filename": "ping.bru",
        "seq": 1,
        "request": {
          "url": "{{host}}/ping",
          "method": "GET",
          "headers": [],
          "params": [],
          "body": {
            "mode": "none",
            "formUrlEncoded": [],
            "multipartForm": [],
            "file": []
          },
          "script": {
            "req": "bru.runner.stopExecution();"
          },
          "vars": {},
          "assertions": [],
          "tests": "",
          "docs": "",
          "auth": {
            "mode": "none"
          }
        }
      },
      {
        "type": "folder",
        "name": "graphql",
        "filename": "graphql",
        "items": [
          {
            "type": "graphql",
            "name": "spacex",
            "filename": "spacex.bru",
            "seq": 1,
            "request": {
              "url": "https://spacex-production.up.railway.app/",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "graphql",
                "graphql": {
                  "query": "{\n  company {\n    ceo\n  }\n}\n"
                },
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "cgAc6fGnMoVZmVUmttac9"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          }
        ]
      },
      {
        "type": "folder",
        "name": "echo",
        "filename": "echo",
        "items": [
          {
            "type": "http",
            "name": "echo bom json",
            "filename": "echo bom json.bru",
            "seq": 1,
            "request": {
              "url": "{{host}}/api/echo/bom-json-test",
              "method": "GET",
              "headers": [],
              "params": [],
              "body": {
                "mode": "none",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo form-url-encoded",
            "filename": "echo form-url-encoded.bru",
            "seq": 9,
            "request": {
              "url": "{{echo-host}}",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "formUrlEncoded",
                "formUrlEncoded": [
                  {
                    "name": "form-data-key",
                    "value": "{{form-data-key}}",
                    "enabled": true
                  },
                  {
                    "name": "form-data-stringified-object",
                    "value": "{{form-data-stringified-object}}",
                    "enabled": true
                  }
                ],
                "multipartForm": [],
                "file": []
              },
              "script": {
                "req": "let obj = JSON.stringify({foo:123});\nbru.setVar('form-data-key', 'form-data-value');\nbru.setVar('form-data-stringified-object', obj);"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq form-data-key=form-data-value&form-data-stringified-object=%7B%22foo%22%3A123%7D",
                  "enabled": true,
                  "uid": "GXP3iOow05yWkFbazZh97"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo json",
            "filename": "echo json.bru",
            "seq": 2,
            "request": {
              "url": "{{host}}/api/echo/json",
              "method": "POST",
              "headers": [
                {
                  "name": "foo",
                  "value": "bar",
                  "enabled": true
                }
              ],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"hello\": \"bruno\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {
                "req": "bru.setVar(\"foo\", \"foo-world-2\");"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "NtmLz1fS7Ms6eQ6ZrDRN0"
                }
              ],
              "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": \"bruno\"\n  });\n});  ",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo multipart via scripting",
            "filename": "echo multipart scripting.bru",
            "seq": 10,
            "request": {
              "url": "{{echo-host}}",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "multipartForm",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {
                "req": "const FormData = require(\"form-data\");\nconst form = new FormData();\nform.append('form-data-key', 'form-data-value');\nreq.setBody(form);"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "contains form-data-value",
                  "enabled": true,
                  "uid": "6jqCWTqQtH6GSgpFNU3ep"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo multipart",
            "filename": "echo multipart.bru",
            "seq": 8,
            "request": {
              "url": "{{echo-host}}",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "multipartForm",
                "formUrlEncoded": [],
                "multipartForm": [
                  {
                    "type": "text",
                    "name": "foo",
                    "value": "{\"bar\":\"baz\"}",
                    "enabled": true
                  },
                  {
                    "type": "text",
                    "name": "form-data-key",
                    "value": "{{form-data-key}}",
                    "enabled": true
                  },
                  {
                    "type": "text",
                    "name": "form-data-stringified-object",
                    "value": "{{form-data-stringified-object}}",
                    "enabled": true
                  },
                  {
                    "type": "file",
                    "name": "file",
                    "value": [
                      "bruno.png"
                    ],
                    "enabled": true
                  }
                ],
                "file": []
              },
              "script": {
                "req": "let obj = JSON.stringify({foo:123});\nbru.setVar('form-data-key', 'form-data-value');\nbru.setVar('form-data-stringified-object', obj);"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "contains form-data-value",
                  "enabled": true,
                  "uid": "mvYX54Lmd3i79iB48LEyz"
                },
                {
                  "name": "res.body",
                  "value": "contains {\"foo\":123}",
                  "enabled": true,
                  "uid": "CAEG8PjR6KPYsIbxz1N0f"
                },
                {
                  "name": "res.body",
                  "value": "contains Content-Type: application/json--test",
                  "enabled": true,
                  "uid": "aZHXzHRJMkWaVqA0kFLJV"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo numbers",
            "filename": "echo numbers.bru",
            "seq": 1,
            "request": {
              "url": "{{echo-host}}",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"integer\": 123,\n  \"negativeInteger\": -99,\n  \"zero\": 0,\n  \"float\": 2.718,\n  \"negativeFloat\": -1.618,\n  \"largeDouble\": 12345.678901234567,\n  \"smallDouble\": 9.876e-12,\n  \"booleanTrue\": true,\n  \"booleanFalse\": false\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body.integer",
                  "value": "eq 123",
                  "enabled": true,
                  "uid": "ZtVS9gUgc5iSmDq0gNIaT"
                },
                {
                  "name": "res.body.integer",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "fqLAWWm8pqG2YacqLa58R"
                },
                {
                  "name": "res.body.negativeInteger",
                  "value": "eq -99",
                  "enabled": true,
                  "uid": "ULU5rgNpJBc4t1OspKAIi"
                },
                {
                  "name": "res.body.negativeInteger",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "gpZjNNkPr2AXn6GzkhkN8"
                },
                {
                  "name": "res.body.zero",
                  "value": "eq 0",
                  "enabled": true,
                  "uid": "D2pXZJB9aTOAwqwXmTVEB"
                },
                {
                  "name": "res.body.zero",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "TE6Q5jhRkjg0Rsp0zNLl7"
                },
                {
                  "name": "res.body.float",
                  "value": "eq 2.718",
                  "enabled": true,
                  "uid": "izHjCWoESD3JaoDgQBwa0"
                },
                {
                  "name": "res.body.float",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "MRZ9PsV8AogLzvgUolu68"
                },
                {
                  "name": "res.body.negativeFloat",
                  "value": "eq -1.618",
                  "enabled": true,
                  "uid": "fzzJP0kj71WFqZ0DDMeIo"
                },
                {
                  "name": "res.body.negativeFloat",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "cm2c5v40ilCZsraGiR564"
                },
                {
                  "name": "res.body.largeDouble",
                  "value": "eq 12345.678901234567",
                  "enabled": true,
                  "uid": "6gnCn1c8TSHigYy1taFhN"
                },
                {
                  "name": "res.body.largeDouble",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "qEHQ1qRt6HyCzMqhUrdIT"
                },
                {
                  "name": "res.body.smallDouble",
                  "value": "eq 9.876e-12",
                  "enabled": true,
                  "uid": "ZKrwMPCjBEGqZ4yb1KxoG"
                },
                {
                  "name": "res.body.smallDouble",
                  "value": "isNumber",
                  "enabled": true,
                  "uid": "xRWLvDJJZSzmpz5vubw8p"
                },
                {
                  "name": "res.body.booleanTrue",
                  "value": "eq true",
                  "enabled": true,
                  "uid": "FENKG4gsPZtHyYYBLNKie"
                },
                {
                  "name": "res.body.booleanFalse",
                  "value": "eq false",
                  "enabled": true,
                  "uid": "6SoMig8CeBBIW590VwX5K"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo plaintext",
            "filename": "echo plaintext.bru",
            "seq": 3,
            "request": {
              "url": "{{host}}/api/echo/text",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "text",
                "text": "hello",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "uWsY31SAmtyc2JIpTxqzO"
                }
              ],
              "tests": "test(\"should return plain text\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql(\"hello\");\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo xml parsed(self closing tags)",
            "filename": "echo xml parsed(self closing tags).bru",
            "seq": 6,
            "request": {
              "url": "{{host}}/api/echo/xml-parsed",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "xml",
                "xml": "<hello>\n  <world>bruno</world>\n  <world/>\n</hello>",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "F4K7K3z239O2WvhcYc8cu"
                }
              ],
              "tests": "test(\"should return parsed xml\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": {\n      \"world\": [\n        \"bruno\",\n        \"\"\n      ]\n    }\n  });\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo xml parsed",
            "filename": "echo xml parsed.bru",
            "seq": 4,
            "request": {
              "url": "{{host}}/api/echo/xml-parsed",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "xml",
                "xml": "<hello>\n  <world>bruno</world>\n</hello>",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "4OxoP1d1Sn7J0Rr5A5MoR"
                }
              ],
              "tests": "test(\"should return parsed xml\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": {\n      \"world\": [\"bruno\"]\n    }\n  });\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "echo xml raw",
            "filename": "echo xml raw.bru",
            "seq": 5,
            "request": {
              "url": "{{host}}/api/echo/xml-raw",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "xml",
                "xml": "<hello><world>bruno</world></hello>",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test echo any",
            "filename": "test echo any.bru",
            "seq": 11,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq hello",
                  "enabled": true,
                  "uid": "7Plt7ZGJQhoOFXFKnTQce"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test echo-any json",
            "filename": "test echo-any json.bru",
            "seq": 12,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"type\": \"application/json\",\n  \"contentJSON\": {\"x\": 42}\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body.x",
                  "value": "eq 42",
                  "enabled": true,
                  "uid": "wU1YDNe5ZYZLi1noaCsHK"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "folder",
            "name": "multiline",
            "filename": "multiline",
            "items": [
              {
                "type": "http",
                "name": "echo binary",
                "filename": "echo binary.bru",
                "seq": 1,
                "request": {
                  "url": "{{echo-host}}",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "file",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": [
                      {
                        "filePath": "bruno.png",
                        "contentType": "image/png",
                        "selected": true
                      }
                    ]
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "type": "folder",
        "name": "auth",
        "filename": "auth",
        "items": [
          {
            "type": "folder",
            "name": "inherit auth",
            "filename": "inherit auth",
            "items": [
              {
                "type": "http",
                "name": "inherit Bearer Auth 200",
                "filename": "inherit Bearer Auth 200.bru",
                "seq": 2,
                "request": {
                  "url": "{{host}}/api/auth/bearer/protected",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "res": "bru.setEnvVar(\"foo\", \"bar\");"
                  },
                  "vars": {},
                  "assertions": [
                    {
                      "name": "res.status",
                      "value": "200",
                      "enabled": true,
                      "uid": "60I5u9Am5kDPd7juwvKV5"
                    },
                    {
                      "name": "res.body.message",
                      "value": "Authentication successful",
                      "enabled": true,
                      "uid": "fkQViSlIxJJ0RyhCN5tp3"
                    }
                  ],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "inherit"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "basic",
            "filename": "basic",
            "items": [
              {
                "type": "folder",
                "name": "via auth",
                "filename": "via auth",
                "items": [
                  {
                    "type": "http",
                    "name": "Basic Auth 200",
                    "filename": "Basic Auth 200.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/api/auth/basic/protected",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "200",
                          "enabled": true,
                          "uid": "d5CVuD1HpRVtyUWziE6Y7"
                        },
                        {
                          "name": "res.body.message",
                          "value": "Authentication successful",
                          "enabled": true,
                          "uid": "kSZPZekosG0Uci7SE8Hju"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "basic",
                        "basic": {
                          "username": "bruno",
                          "password": "{{basic_auth_password}}"
                        }
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "Basic Auth 400",
                    "filename": "Basic Auth 401.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/api/auth/basic/protected",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "401",
                          "enabled": true,
                          "uid": "xnlyXClGdlx7gGLwzaniZ"
                        },
                        {
                          "name": "res.body",
                          "value": "Unauthorized",
                          "enabled": true,
                          "uid": "20H5jGbawcioeVKPLMsHn"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "via script",
                "filename": "via script",
                "items": [
                  {
                    "type": "http",
                    "name": "Basic Auth 401",
                    "filename": "Basic Auth 401.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/api/auth/basic/protected",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const username = \"bruno\";\nconst password = \"invalid\";\n\nconst authString = `${username}:${password}`;\nconst encodedAuthString = require('btoa')(authString);\n\nreq.setHeader(\"Authorization\", `Basic ${encodedAuthString}`);"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "401",
                          "enabled": true,
                          "uid": "96LEDffmtAmfKTsfemJaB"
                        },
                        {
                          "name": "res.body",
                          "value": "Unauthorized",
                          "enabled": true,
                          "uid": "7B66oHgquEiW39PCRcf5A"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "Basic Auth 200",
                    "filename": "Basic Auth 200.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/api/auth/basic/protected",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const username = \"bruno\";\nconst password = \"della\";\n\nconst authString = `${username}:${password}`;\nconst encodedAuthString = require('btoa')(authString);\n\nreq.setHeader(\"Authorization\", `Basic ${encodedAuthString}`);"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "C7EXFxZSx9MTjrPvbZK9h"
                        },
                        {
                          "name": "res.body.message",
                          "value": "Authentication successful",
                          "enabled": true,
                          "uid": "zXFBjrNaXojNhRdJVJ86w"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "folder",
            "name": "cookie",
            "filename": "cookie",
            "items": [
              {
                "type": "http",
                "name": "Check",
                "filename": "Check.bru",
                "seq": 2,
                "request": {
                  "url": "{{host}}/api/auth/cookie/protected",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "Login",
                "filename": "Login.bru",
                "seq": 1,
                "request": {
                  "url": "{{host}}/api/auth/cookie/login",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "bearer",
            "filename": "bearer",
            "items": [
              {
                "type": "folder",
                "name": "via headers",
                "filename": "via headers",
                "items": [
                  {
                    "type": "http",
                    "name": "Bearer Auth 200",
                    "filename": "Bearer Auth 200.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/api/auth/bearer/protected",
                      "method": "GET",
                      "headers": [
                        {
                          "name": "Authorization",
                          "value": "Bearer your_secret_token",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "res": "bru.setEnvVar(\"foo\", \"bar\");"
                      },
                      "vars": {
                        "req": [
                          {
                            "name": "a-c",
                            "value": "foo",
                            "enabled": true,
                            "local": false
                          }
                        ]
                      },
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "200",
                          "enabled": true,
                          "uid": "uV4xNx780Qk3ff8zj0xVX"
                        },
                        {
                          "name": "res.body.message",
                          "value": "Authentication successful",
                          "enabled": true,
                          "uid": "0t9sjKI6l5tFRfLYcFLXv"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "via auth",
                "filename": "via auth",
                "items": [
                  {
                    "type": "http",
                    "name": "Bearer Auth 200",
                    "filename": "Bearer Auth 200.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/api/auth/bearer/protected",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "res": "bru.setEnvVar(\"foo\", \"bar\");"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "200",
                          "enabled": true,
                          "uid": "nD6fKpZaZcqky2EMS3hhQ"
                        },
                        {
                          "name": "res.body.message",
                          "value": "Authentication successful",
                          "enabled": true,
                          "uid": "HRp5kskhIHPPXXDesRKj0"
                        }
                      ],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "bearer",
                        "bearer": {
                          "token": "{{bearer_auth_token}}"
                        }
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "folder",
        "name": "multipart",
        "filename": "multipart"
      },
      {
        "type": "folder",
        "name": "lib",
        "filename": "lib",
        "items": [
          {
            "type": "js",
            "name": "constants",
            "filename": "constants.js",
            "seq": 1,
            "fileContent": "const PI = 3.14;\n\nmodule.exports = {\n  PI\n};"
          },
          {
            "type": "js",
            "name": "math",
            "filename": "math.js",
            "seq": 1,
            "fileContent": "const { PI } = require('./constants');\n\nconst sum = (a, b) => a + b;\nconst areaOfCircle = (radius) => PI * radius * radius;\n\nmodule.exports = {\n  sum,\n  areaOfCircle\n};\n"
          },
          {
            "type": "js",
            "name": "notes",
            "filename": "notes.js",
            "seq": 1,
            "fileContent": "const visualizeNotes = (res) => {\n  let response = res.body;\n\n  let notes = response?.notes || {};\n  let responseRuntime = notes.runtime_sec || 0;\n\n  notes.runtime = new Date(responseRuntime * 1000).toISOString().substr(11, 8);\n\n  if (typeof response?.data === 'undefined' && typeof response?.rows === 'object') {\n    response.data = response?.rows?.map(function (data) {\n      return data?.values;\n    });\n  }\n\n  const templateScript = `\n    <script id=\"template\" type=\"text/x-handlebars-template\">\n      {{#if response.data}}\n          <div>\n              <p>Total rows: {{notes.result_rows}}</p>\n              <p>Query count: {{notes.query_count}}</p>\n              <p>Duration: {{notes.runtime}}</p>\n          </div>\n          <table id=\"data_table\">\n              {{#each response.data}}\n                  {{#if @first}}\n                      <tr>\n                          {{#each this}}\n                              <th>\n                                  {{#with (lookup ../../response.fields @index)~}}\n                                      <small>\n                                          {{name}} ({{type}})<br>\n                                          {{data_type}}<br>\n                                      </small>\n                                  {{/with}}\n                                  {{this}}\n                              </th>\n                          {{/each}}\n                      </tr>\n                  {{else}}\n                      <tr id=\"row_{{@key}}\" class=\"data_row\">\n                          {{#each this}}\n                              <td>{{this}}</td>\n                          {{/each}}\n                      </tr>\n                  {{/if}}\n              {{/each}}\n          </table>\n      {{else if response.results}}\n          <table id=\"data_table\">\n              <tr>\n                  {{#each response.results.[0]}}\n                      <th>{{@key}}</th>\n                  {{/each}}\n              </tr>\n              {{#each response.results}}\n                  <tr id=\"row_{{@key}}\" class=\"data_row\">\n                      {{#each this}}\n                          <td>{{this}}</td>\n                      {{/each}}\n                  </tr>\n              {{/each}}\n          </table>\n      {{else}}\n          <div class=\"error\">\n              <h1>Error</h1>\n              {{#if response.notes}}\n                  {{response.notes.error}}\n              {{else}}\n                  No response\n              {{/if}}\n          </div>\n      {{/if}}\n    </script>\n  `;\n\n  const mainScript = `\n    <script>\n      document.addEventListener(\"DOMContentLoaded\", function() {\n        let data = ${JSON.stringify({\n          response,\n          notes\n        })}\n        let source = document.getElementById(\"template\").innerHTML;\n        let template = Handlebars.compile(source);\n        document.body.innerHTML = template(data);\n        document.getElementById('data_table').addEventListener('click', function(e) {\n          var row = e.target.closest('tr.data_row');\n          if (row) {\n              row.classList.toggle('marked');\n          }\n        });\n      });\n    </script>\n  `;\n\n  const style = `\n    <style type=\"text/css\">\n        div {\n            margin-bottom: 8px;\n        }\n        div p {\n            font-family: courier;\n            font-size: 12px;\n            line-height: 1.2;\n            color: #afafaf;\n            margin: 0;\n        }\n        div.error {\n            padding: 20px;\n            background-color: #ffcece;\n            color: #792626;\n            font-size: 18px;\n        }\n        div.error h1 {\n            color: #dd4545;\n            line-height: 50px;\n            font-size: 28px;\n            font-weight: bold;\n            text-transform: uppercase;\n        }\n        table {\n            background-color: #454545;\n            color: #dedede;\n            font-size: 12px;\n            width: 100%;\n            border: 1px solid #cdcdcd;\n            border-collapse: collapse;\n        }\n        table th, table td {\n            border: 1px solid #797979;\n        }\n        table th {\n            font-size: 14px;\n            font-weight: bold;\n            background-color: #565656;\n            text-align: left;\n            vertical-align: bottom;\n        }\n        table th, table th:first-child, table th:last-child {\n            padding: 4px;\n        }\n        table th small {\n            font-size: 10px;\n            color: #afafaf;\n        }\n        table tr:hover {\n            background-color:#505050;\n        }\n        table tr.marked:nth-child(even) {\n            background-color: #707070;\n        }\n        table tr.marked:nth-child(odd) {\n            background-color: #696969;\n        }\n        table td {\n            padding: 2px;\n        }\n        table td, table td:first-child, table td:last-child {\n            padding: 3px;\n        }\n    </style>\n  `;\n\n  const htmlString = `\n    <html>\n      <head>\n        ${style}\n      </head>\n      <body>\n        <script src=\"https://rawgit.com/components/handlebars.js/master/handlebars.js\"></script>\n        ${templateScript}\n        ${mainScript}\n      </body>\n    </html>\n  `;\n\n  return htmlString;\n};\n\nmodule.exports = visualizeNotes;\n"
          }
        ]
      },
      {
        "type": "folder",
        "name": "string interpolation",
        "filename": "string interpolation",
        "root": {
          "request": {
            "vars": {
              "req": [
                {
                  "name": "folder_pre_var",
                  "value": "folder_pre_var_value",
                  "enabled": true,
                  "local": false,
                  "uid": "V3bTRQFGwkKI4UoahPd2V"
                },
                {
                  "name": "folder_pre_var_2",
                  "value": "{{env.var1}}",
                  "enabled": true,
                  "local": false,
                  "uid": "av2XViQpOS4JZDWur8dK2"
                }
              ]
            }
          },
          "meta": {
            "name": "string interpolation"
          }
        },
        "items": [
          {
            "type": "http",
            "name": "env vars",
            "filename": "env vars.bru",
            "seq": 2,
            "request": {
              "url": "{{host}}/api/echo/json",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"envVar1\": \"{{env.var1}}\",\n  \"envVar2\": \"{{env-var2}}\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "u2yA2zeeglSqFZxTDHEiZ"
                }
              ],
              "tests": "test(\"should return json\", function() {\n  expect(res.getBody()).to.eql({\n    \"envVar1\": \"envVar1\",\n    \"envVar2\": \"envVar2\"\n  });\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "missing values",
            "filename": "missing values.bru",
            "seq": 1,
            "request": {
              "url": "{{host}}/api/echo/json?foo={{undefinedVar}}",
              "method": "POST",
              "headers": [],
              "params": [
                {
                  "name": "foo",
                  "value": "{{undefinedVar}}",
                  "type": "query",
                  "enabled": true
                }
              ],
              "body": {
                "mode": "json",
                "json": "{\n  \"hello\": \"{{undefinedVar2}}\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "BwlJRndmkVnlQgCdpdNoE"
                }
              ],
              "tests": "test(\"should return json\", function() {\n  const url = req.getUrl();\n  const query = url.split(\"?\")[1];\n  expect(query).to.equal(\"foo={{undefinedVar}}\");\n\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": \"{{undefinedVar2}}\"\n  });\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "process env vars",
            "filename": "process env vars.bru",
            "seq": 4,
            "request": {
              "url": "{{host}}/api/echo/json",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"bark\": \"{{bark}}\",\n  \"bark2\": \"{{process.env.PROC_ENV_VAR}}\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "VDoqOFucl5B4UdBGqGCAl"
                }
              ],
              "tests": "test(\"should return json\", function() {\n  expect(res.getBody()).to.eql({\n    \"bark\": \"woof\",\n    \"bark2\": \"woof\"\n  });\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "runtime vars",
            "filename": "runtime vars.bru",
            "seq": 3,
            "request": {
              "url": "{{host}}/api/echo/text",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "text",
                "json": "{\n  \"envVar1\": \"{{env.var1}}\",\n  \"envVar2\": \"{{env-var2}}\"\n}",
                "text": "Hi, I am {{rUser.full_name}},\nI am {{rUser.age}} years old.\nMy favorite food is {{rUser.fav-food[0]}} and {{rUser.fav-food[1]}}.\nI like attention: {{rUser.want.attention}}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {
                "req": "bru.setVar(\"rUser\", {\n  full_name: 'Bruno',\n  age: 5,\n  'fav-food': ['egg', 'meat'],\n  'want.attention': true\n});"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "eq 200",
                  "enabled": true,
                  "uid": "EodEloyMBhRCH8mPoLR8E"
                }
              ],
              "tests": "test(\"should return json\", function() {\n  const expectedResponse = `Hi, I am Bruno,\nI am 5 years old.\nMy favorite food is egg and meat.\nI like attention: true`;\n  expect(res.getBody()).to.equal(expectedResponse);\n});\n",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          }
        ]
      },
      {
        "type": "folder",
        "name": "redirects",
        "filename": "redirects",
        "items": [
          {
            "type": "http",
            "name": "Disable Redirect",
            "filename": "Disable Redirect.bru",
            "seq": 1,
            "request": {
              "url": "{{host}}/redirect-to-ping",
              "method": "GET",
              "headers": [],
              "params": [],
              "body": {
                "mode": "none",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {
                "req": "req.setMaxRedirects(0);"
              },
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "302",
                  "enabled": true,
                  "uid": "Kqu9TpenOeiPke7gM6e2W"
                }
              ],
              "tests": "test(\"should disable redirect to ping\", function() {\n  const data = res.getBody();\n  expect(data).to.equal('Found. Redirecting to /ping');\n});",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "Test Redirect",
            "filename": "Test Redirect.bru",
            "seq": 2,
            "request": {
              "url": "{{host}}/redirect-to-ping",
              "method": "GET",
              "headers": [],
              "params": [],
              "body": {
                "mode": "none",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.status",
                  "value": "200",
                  "enabled": true,
                  "uid": "IDIABjMsPFmyysPy3DDLG"
                },
                {
                  "name": "res.body",
                  "value": "pong",
                  "enabled": true,
                  "uid": "d74g0aRt3Mlk1yaTa2BD1"
                }
              ],
              "tests": "test(\"should redirect to ping\", function() {\n  const data = res.getBody();\n  expect(data).to.equal('pong');\n});",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          }
        ]
      },
      {
        "type": "folder",
        "name": "asserts",
        "filename": "asserts",
        "items": [
          {
            "type": "http",
            "name": "test-assert-combinations",
            "filename": "test-assert-combinations.bru",
            "seq": 1,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"type\": \"application/json\",\n  \"contentJSON\": {\n    \"string\": \"foo\",\n    \"stringWithSQuotes\": \"'foo'\",\n    \"stringWithDQuotes\": \"\\\"foo\\\"\",\n    \"number\": 123,\n    \"numberAsString\": \"123\",\n    \"numberAsStringWithSQuotes\": \"'123'\",\n    \"numberAsStringWithDQuotes\": \"\\\"123\\\"\",\n    \"numberAsStringWithLeadingZero\": \"0123\",\n    \"numberBig\": 9007199254740992000,\n    \"numberBigAsString\": \"9007199254740991999\",\n    \"null\": null,\n    \"nullAsString\": \"null\",\n    \"nullAsStringWithSQuotes\": \"'null'\",\n    \"nullAsStringWithDQuotes\": \"\\\"null\\\"\",\n    \"true\": true,\n    \"trueAsString\": \"true\",\n    \"trueAsStringWithSQuotes\": \"'true'\",\n    \"trueAsStringWithDQuotes\": \"\\\"true\\\"\",\n    \"false\": false,\n    \"falseAsString\": \"false\",\n    \"falseAsStringWithSQuotes\": \"'false'\",\n    \"falseAsStringWithDQuotes\": \"\\\"false\\\"\",\n    \"stringWithCurlyBraces\": \"{foo}\",\n    \"stringWithDoubleCurlyBraces\": \"{{foobar}}\"\n  }\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body.string",
                  "value": "eq foo",
                  "enabled": true,
                  "uid": "BIAZhDa8r5jiaeUMC9oJx"
                },
                {
                  "name": "res.body.string",
                  "value": "eq 'foo'",
                  "enabled": true,
                  "uid": "MmDv72YGFukil4LAZ6H1f"
                },
                {
                  "name": "res.body.string",
                  "value": "eq \"foo\"",
                  "enabled": true,
                  "uid": "p0YuYI8JJhOLnQmb1OJyO"
                },
                {
                  "name": "res.body.stringWithSQuotes",
                  "value": "eq \"'foo'\"",
                  "enabled": true,
                  "uid": "6vBjUYmjT6w680kXw5GN8"
                },
                {
                  "name": "res.body.stringWithDQuotes",
                  "value": "eq '\"foo\"'",
                  "enabled": true,
                  "uid": "6SlJJOabN6dqU6zzBGJ5V"
                },
                {
                  "name": "res.body.number",
                  "value": "eq 123",
                  "enabled": true,
                  "uid": "qsTsccOFzdaTad54qLRPD"
                },
                {
                  "name": "res.body.numberAsString",
                  "value": "eq '123'",
                  "enabled": true,
                  "uid": "acr4c0DbVSMHybtmPfpAK"
                },
                {
                  "name": "res.body.numberAsString",
                  "value": "eq \"123\"",
                  "enabled": true,
                  "uid": "j2UBEitg7trKqERvHFonB"
                },
                {
                  "name": "res.body.numberAsStringWithSQuotes",
                  "value": "eq \"'123'\"",
                  "enabled": true,
                  "uid": "HkhFuTMDlPTtjdRH1JtDq"
                },
                {
                  "name": "res.body.numberAsStringWithDQuotes",
                  "value": "eq '\"123\"'",
                  "enabled": true,
                  "uid": "FOJ9Il1Mw26AVh3mtfH2A"
                },
                {
                  "name": "res.body.numberAsStringWithLeadingZero",
                  "value": "eq \"0123\"",
                  "enabled": true,
                  "uid": "PYqZgMwa8utODeQu6jGZ8"
                },
                {
                  "name": "res.body.numberBig.toString()",
                  "value": "eq '9007199254740992000'",
                  "enabled": true,
                  "uid": "ceH22BYjeONOfjQzCQuQ5"
                },
                {
                  "name": "res.body.numberBigAsString",
                  "value": "eq \"9007199254740991999\"",
                  "enabled": true,
                  "uid": "ISsGCwNYz2gO1OiwCrSzj"
                },
                {
                  "name": "res.body.null",
                  "value": "eq null",
                  "enabled": true,
                  "uid": "ymthap5UgbSWYrA2KrhSf"
                },
                {
                  "name": "res.body.nullAsString",
                  "value": "eq \"null\"",
                  "enabled": true,
                  "uid": "70dQ4jmZ3NObBuSgNms4U"
                },
                {
                  "name": "res.body.nullAsStringWithSQuotes",
                  "value": "eq \"'null'\"",
                  "enabled": true,
                  "uid": "8sHCgezylhO5WobuMF6x5"
                },
                {
                  "name": "res.body.nullAsStringWithDQuotes",
                  "value": "eq '\"null\"'",
                  "enabled": true,
                  "uid": "Beo0GPeJjGChOUW3ULJFq"
                },
                {
                  "name": "res.body.true",
                  "value": "eq true",
                  "enabled": true,
                  "uid": "xyKYxUigaRbnsM3NUCGqo"
                },
                {
                  "name": "res.body.trueAsString",
                  "value": "eq \"true\"",
                  "enabled": true,
                  "uid": "TpEuGS0KamPW2P5WlNKIz"
                },
                {
                  "name": "res.body.trueAsStringWithSQuotes",
                  "value": "eq \"'true'\"",
                  "enabled": true,
                  "uid": "NGOStfvaFasU1BnDQBeNw"
                },
                {
                  "name": "res.body.trueAsStringWithDQuotes",
                  "value": "eq '\"true\"'",
                  "enabled": true,
                  "uid": "1aQu1geER6NzyRyvn6YKL"
                },
                {
                  "name": "res.body.false",
                  "value": "eq false",
                  "enabled": true,
                  "uid": "5hYV1aZexcmTnvWVGukhR"
                },
                {
                  "name": "res.body.falseAsString",
                  "value": "eq \"false\"",
                  "enabled": true,
                  "uid": "0nlBWyhHLkqwJnnQvntpH"
                },
                {
                  "name": "res.body.falseAsStringWithSQuotes",
                  "value": "eq \"'false'\"",
                  "enabled": true,
                  "uid": "6SyZkAdoR7nymmSuxEAVm"
                },
                {
                  "name": "res.body.falseAsStringWithDQuotes",
                  "value": "eq '\"false\"'",
                  "enabled": true,
                  "uid": "ikW1dRvg543wlg4OBVOj4"
                },
                {
                  "name": "res.body.nonexistent",
                  "value": "eq undefined",
                  "enabled": true,
                  "uid": "18cmPWFrjuhO9w3r37QbC"
                },
                {
                  "name": "res.body.stringWithCurlyBraces",
                  "value": "eq \"{foo}\"",
                  "enabled": true,
                  "uid": "MG7kIGiDRpVMWFsUNJwwL"
                },
                {
                  "name": "res.body.stringWithDoubleCurlyBraces",
                  "value": "eq \"{{foobar}}\"",
                  "enabled": true,
                  "uid": "lc8H3nkOK6oH9EU8pfGAB"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          }
        ]
      },
      {
        "type": "folder",
        "name": "response-parsing",
        "filename": "response-parsing",
        "items": [
          {
            "type": "http",
            "name": "test JSON false response",
            "filename": "test JSON false response.bru",
            "seq": 11,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"false\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq false",
                  "enabled": true,
                  "uid": "44ByglOpNCcWR39kkFqUB"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON null response",
            "filename": "test JSON null response.bru",
            "seq": 6,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"null\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq null",
                  "enabled": true,
                  "uid": "SoMSHwOxrNF0mO7vjtMIq"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON number response",
            "filename": "test JSON number response.bru",
            "seq": 12,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"3.1\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq 3.1",
                  "enabled": true,
                  "uid": "PXORG50VO2DQhpxTe4Z9b"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON response",
            "filename": "test JSON response.bru",
            "seq": 2,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"contentJSON\": { \"message\": \"hello\" }\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body.message",
                  "value": "eq hello",
                  "enabled": true,
                  "uid": "ghYaoqOIqNkzYySyevIbS"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON string response",
            "filename": "test JSON string response.bru",
            "seq": 7,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"\\\"ok\\\"\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq ok",
                  "enabled": true,
                  "uid": "lrb7s0Cy5fSBmpsnQS2hC"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON string with quotes response",
            "filename": "test JSON string with quotes response.bru",
            "seq": 8,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"contentJSON\": \"\\\"ok\\\"\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq '\"ok\"'",
                  "enabled": true,
                  "uid": "0vtvad5pJzWJ82EkoP1tL"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON true response",
            "filename": "test JSON true response.bru",
            "seq": 10,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"true\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq true",
                  "enabled": true,
                  "uid": "gWf2HHCyZEfJDjF9epFgh"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test JSON unsafe-int response",
            "filename": "test JSON unsafe-int response.bru",
            "seq": 13,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"90071992547409919876\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body.toString()",
                  "value": "eq 90071992547409920000",
                  "enabled": true,
                  "uid": "VPxENgWx5laoc8a8AbPSt"
                }
              ],
              "tests": "",
              "docs": "Note: This test is not perfect, we should match the unparsed raw-response with the expected string version of the unsafe-integer",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test binary response",
            "filename": "test binary response.bru",
            "seq": 4,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"type\": \"application/octet-stream\",\n  \"contentBase64\": \"+Z1P82iH1wmbILfvnhvjQVbVAktP4TzltpxYD74zNyA=\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [],
              "tests": "test(\"response matches the expectation after utf-8 decoding(needs improvement)\", function () {\n  expect(res.getStatus()).to.equal(200);\n  const dataBinary = Buffer.from(\"+Z1P82iH1wmbILfvnhvjQVbVAktP4TzltpxYD74zNyA=\", \"base64\"); \n  expect(res.body).to.equal(dataBinary.toString(\"utf-8\"));\n});",
              "docs": "Note:\n\nThis test is not perfect and needs to be improved by direclty matching expected binary data with raw-response.\n\nCurrently res.body is decoded with `utf-8` by default and looses data in the process. We need some property in `res` which gives access to raw-data/Buffer.",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test html response",
            "filename": "test html response.bru",
            "seq": 5,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/html\" },\n  \"content\": \"<h1>hello</h1>\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq <h1>hello</h1>",
                  "enabled": true,
                  "uid": "2ljMHST9vdVDcGsDYeea5"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test image response",
            "filename": "test image response.bru",
            "seq": 3,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"type\": \"image/png\",\n  \"contentBase64\": \"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkAQMAAABKLAcXAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGUExURQCqAP///59OGOoAAAABYktHRAH/Ai3eAAAAB3RJTUUH6QMHCwUNKHvFmgAAABRJREFUOMtjYBgFo2AUjIJRQE8AAAV4AAEpcbn8AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDI1LTAzLTA3VDExOjA1OjEzKzAwOjAwQkgGWgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyNS0wMy0wN1QxMTowNToxMyswMDowMDMVvuYAAAAodEVYdGRhdGU6dGltZXN0YW1wADIwMjUtMDMtMDdUMTE6MDU6MTMrMDA6MDBkAJ85AAAAAElFTkSuQmCC\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text response with formatting",
            "filename": "test plain text response with formatting.bru",
            "seq": 18,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\\n\\tworld\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq hello\\n\\tworld",
                  "enabled": true,
                  "uid": "krtHsmpnhOUT4SP575BjE"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text response",
            "filename": "test plain text response.bru",
            "seq": 1,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq hello",
                  "enabled": true,
                  "uid": "iiduau7JWqfG721cU41GX"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test invalid JSON response with formatting",
            "filename": "test invalid JSON response with formatting.bru",
            "seq": 19,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"hello\\n\\tworld\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq hello\\n\\tworld",
                  "enabled": true,
                  "uid": "2Lgh5484D4lpF5w2d0y4M"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text utf16 response",
            "filename": "test plain text utf16 response.bru",
            "seq": 14,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"dABoAGkAcwAgAGkAcwAgAGUAbgBjAG8AZABlAGQAIAB3AGkAdABoACAAdQB0AGYAMQA2AA==\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq \"this is encoded with utf16\"",
                  "enabled": true,
                  "uid": "bTudYyt3VYDJBGUQMaBrn"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text utf16-be with BOM response",
            "filename": "test plain text utf16-be with BOM response.bru",
            "seq": 15,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"/v8AdABoAGkAcwAgAGkAcwAgAGUAbgBjAG8AZABlAGQAIAB3AGkAdABoACAAdQB0AGYAMQA2AC0AYgBlACAAdwBpAHQAaAAgAEIATwBN\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq \"this is encoded with utf16-be with BOM\"",
                  "enabled": true,
                  "uid": "2y4vvfKmEIiPbazx9WcI7"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text utf16-le with BOM response",
            "filename": "test plain text utf16-le with BOM response.bru",
            "seq": 16,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"//50AGgAaQBzACAAaQBzACAAZQBuAGMAbwBkAGUAZAAgAHcAaQB0AGgAIAB1AHQAZgAxADYALQBsAGUAIAB3AGkAdABoACAAQgBPAE0A\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq \"this is encoded with utf16-le with BOM\"",
                  "enabled": true,
                  "uid": "DoCOfg20CxCaNv59xBeMK"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test plain text utf8 with BOM response",
            "filename": "test plain text utf8 with BOM response.bru",
            "seq": 17,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf8\" },\n  \"contentBase64\": \"77u/dGhpcyBpcyB1dGY4IGVuY29kZWQgd2l0aCBCT00sIHdoeSBub3Q/\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq \"this is utf8 encoded with BOM, why not?\"",
                  "enabled": true,
                  "uid": "W2wEieY0CyJnZPTS7QFdi"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          },
          {
            "type": "http",
            "name": "test xml response",
            "filename": "test xml response.bru",
            "seq": 9,
            "request": {
              "url": "{{httpfaker}}/api/echo/custom",
              "method": "POST",
              "headers": [],
              "params": [],
              "body": {
                "mode": "json",
                "json": "{\n  \"headers\": { \"content-type\": \"application/xml\" },\n  \"content\": \"<message>hello</message>\"\n}",
                "formUrlEncoded": [],
                "multipartForm": [],
                "file": []
              },
              "script": {},
              "vars": {},
              "assertions": [
                {
                  "name": "res.body",
                  "value": "eq <message>hello</message>",
                  "enabled": true,
                  "uid": "LpkeJWArhseIjWVvrRSsY"
                }
              ],
              "tests": "",
              "docs": "",
              "auth": {
                "mode": "none"
              }
            }
          }
        ]
      },
      {
        "type": "folder",
        "name": "preview",
        "filename": "preview",
        "items": [
          {
            "type": "folder",
            "name": "html",
            "filename": "html",
            "items": [
              {
                "type": "http",
                "name": "bruno",
                "filename": "bruno.bru",
                "seq": 1,
                "request": {
                  "url": "https://www.usebruno.com",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [
                    {
                      "name": "res.status",
                      "value": "eq 200",
                      "enabled": true,
                      "uid": "Lq3jQdo5w6Sj5DmK7RR4e"
                    }
                  ],
                  "tests": "test(\"should return parsed xml\", function() {\n  const headers = res.getHeaders();\n  expect(headers['content-type']).to.eql(\"text/html; charset=utf-8\");\n});\n",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "image",
            "filename": "image",
            "items": [
              {
                "type": "http",
                "name": "bruno",
                "filename": "bruno.bru",
                "seq": 1,
                "request": {
                  "url": "https://www.usebruno.com/favicon.ico",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [],
                  "tests": "test(\"should return parsed xml\", function() {\n  const headers = res.getHeaders();\n  expect(headers['content-type']).to.eql(\"image/x-icon\");\n});\n",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "type": "folder",
        "name": "scripting",
        "filename": "scripting",
        "items": [
          {
            "type": "folder",
            "name": "js",
            "filename": "js",
            "root": {
              "request": {
                "headers": [
                  {
                    "name": "folder-header",
                    "value": "folder-header-value",
                    "enabled": true,
                    "uid": "IbjpKtt6OSIEfbEpq63i5"
                  }
                ],
                "script": {
                  "req": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestFolderScripts = bru.getVar('should-test-folder-scripts');\nif(shouldTestFolderScripts) {\n bru.setVar('folder-var-set-by-folder-script', 'folder-var-value-set-by-folder-script');\n}"
                },
                "tests": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestFolderScripts = bru.getVar('should-test-folder-scripts');\nconst folderVar = bru.getVar(\"folder-var-set-by-folder-script\");\nif (shouldTestFolderScripts && folderVar) {\n  test(\"folder level test - should get the var that was set by the folder script\", function() {\n    expect(folderVar).to.equal(\"folder-var-value-set-by-folder-script\");\n  }); \n  bru.setVar('folder-var-set-by-folder-script', null); \n  bru.setVar('should-test-folder-scripts', null);\n}"
              },
              "meta": {
                "name": "js"
              }
            },
            "items": [
              {
                "type": "http",
                "name": "data types - request vars",
                "filename": "data types - request vars.bru",
                "seq": 3,
                "request": {
                  "url": "{{host}}/api/echo/json",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "json",
                    "json": "{\n  \"boolean\": false,\n  \"number_1\": 1,\n  \"number_2\": 0,\n  \"number_3\": -1,\n  \"string\": \"bruno\",\n  \"array\": [1, 2, 3, 4, 5],\n  \"object\": {\n    \"hello\": \"bruno\"\n  },\n  \"null\": null\n}",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {},
                  "vars": {},
                  "assertions": [
                    {
                      "name": "req.body.boolean",
                      "value": "isBoolean false",
                      "enabled": true,
                      "uid": "zEDwisxV9J5rpkVFsogOa"
                    },
                    {
                      "name": "req.body.number_1",
                      "value": "isNumber 1",
                      "enabled": true,
                      "uid": "dl2kC9vNfZZstXR4T7m82"
                    },
                    {
                      "name": "req.body.undefined",
                      "value": "isUndefined undefined",
                      "enabled": true,
                      "uid": "IgJsHATg2BunQdduIPWj7"
                    },
                    {
                      "name": "req.body.string",
                      "value": "isString bruno",
                      "enabled": true,
                      "uid": "ZkjsCtU9U3CXoUXQR22wr"
                    },
                    {
                      "name": "req.body.null",
                      "value": "isNull null",
                      "enabled": true,
                      "uid": "QK3P1uBuD9DwmMgQfeEIU"
                    },
                    {
                      "name": "req.body.array",
                      "value": "isArray",
                      "enabled": true,
                      "uid": "SS4pel9Lxy2zXJplAwdGl"
                    },
                    {
                      "name": "req.body.boolean",
                      "value": "eq false",
                      "enabled": true,
                      "uid": "bgDu625CBaYhGfZdDUPW0"
                    },
                    {
                      "name": "req.body.number_1",
                      "value": "eq 1",
                      "enabled": true,
                      "uid": "H0iOZFFLufmyelF7JT66C"
                    },
                    {
                      "name": "req.body.undefined",
                      "value": "eq undefined",
                      "enabled": true,
                      "uid": "NH5NrTa3rDBUovinP39vc"
                    },
                    {
                      "name": "req.body.string",
                      "value": "eq bruno",
                      "enabled": true,
                      "uid": "BWf3Y60ywGiLMP3BdtjF8"
                    },
                    {
                      "name": "req.body.null",
                      "value": "eq null",
                      "enabled": true,
                      "uid": "mz2qdTyufiVSGmDAsdDJD"
                    },
                    {
                      "name": "req.body.number_2",
                      "value": "eq 0",
                      "enabled": true,
                      "uid": "Fj8Je4fBjHQaBn9MlcyRY"
                    },
                    {
                      "name": "req.body.number_3",
                      "value": "eq -1",
                      "enabled": true,
                      "uid": "8nH1gowUVSlPE5B7zXjIu"
                    },
                    {
                      "name": "req.body.number_2",
                      "value": "isNumber",
                      "enabled": true,
                      "uid": "bZXbYyYOrxtfq3rcK4T0R"
                    },
                    {
                      "name": "req.body.number_3",
                      "value": "isNumber",
                      "enabled": true,
                      "uid": "WUpdAAGdYgyumiueofKzX"
                    }
                  ],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "data types",
                "filename": "data types.bru",
                "seq": 2,
                "request": {
                  "url": "{{host}}/api/echo/json",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "json",
                    "json": "{\n  \"boolean\": false,\n  \"number\": 1,\n  \"string\": \"bruno\",\n  \"array\": [1, 2, 3, 4, 5],\n  \"object\": {\n    \"hello\": \"bruno\"\n  },\n  \"null\": null\n}",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "const reqBody = req.getBody();\n\nbru.setVar(\"dataTypeVarTest\", {\n  ...reqBody,\n  \"undefined\": undefined\n});"
                  },
                  "vars": {},
                  "assertions": [],
                  "tests": "test(\"data types check via bru var\", function() {\n  let v = bru.getVar(\"dataTypeVarTest\");\n  v = {\n    ...v,\n    \"undefined\": undefined\n  };\n  expect(v).to.eql({\n    \"boolean\": false,\n    \"number\": 1,\n    \"string\": \"bruno\",\n    \"array\": [1, 2, 3, 4, 5],\n    \"object\": {\n      \"hello\": \"bruno\"\n    },\n    \"null\": null,\n    \"undefined\": undefined\n  })\n});",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "folder-collection script-tests pre",
                "filename": "folder-collection script-tests pre.bru",
                "seq": 4,
                "request": {
                  "url": "{{echo-host}}",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "bru.setVar('should-test-collection-scripts', true);\nbru.setVar('should-test-folder-scripts', true);"
                  },
                  "vars": {},
                  "assertions": [],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "folder-collection script-tests",
                "filename": "folder-collection script-tests.bru",
                "seq": 5,
                "request": {
                  "url": "{{echo-host}}",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "// do not delete - the collection/folder scripts/tests run during this request execution"
                  },
                  "vars": {},
                  "assertions": [],
                  "tests": "const collectionHeader = req.getHeader(\"collection-header\");\nconst folderHeader = req.getHeader(\"folder-header\");\n\ntest(\"should get the header value set at collection level\", function() {\n  expect(collectionHeader).to.equal(\"collection-header-value\");\n});\n\ntest(\"should get the header value set at folder level\", function() {\n  expect(folderHeader).to.equal(\"folder-header-value\");\n});",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "setTimeout",
                "filename": "setTimeout.bru",
                "seq": 1,
                "request": {
                  "url": "{{host}}/ping",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "bru.setVar(\"test-js-set-timeout\", \"\");\nawait new Promise((resolve, reject) => {\n  setTimeout(() => {\n    bru.setVar(\"test-js-set-timeout\", \"bruno\");\n    resolve();\n  }, 1000);\n});\n\nconst v = bru.getVar(\"test-js-set-timeout\");\nbru.setVar(\"test-js-set-timeout\", v + \"-is-awesome\");\n"
                  },
                  "vars": {},
                  "assertions": [],
                  "tests": "test(\"setTimeout()\", function() {\n  const v = bru.getVar(\"test-js-set-timeout\")\n  expect(v).to.eql(\"bruno-is-awesome\");\n});",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "npm modules",
            "filename": "npm modules",
            "items": [
              {
                "type": "http",
                "name": "fakerjs",
                "filename": "fakerjs.bru",
                "seq": 1,
                "request": {
                  "url": "{{host}}/api/echo/json",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "json",
                    "json": "{\n  \"hello\": \"bruno\"\n}",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "const { faker } = require('@faker-js/faker');\nconst uuid = faker.string.uuid();\n\nconst data = req.getBody();\ndata.uuid = uuid;\n\nreq.setBody(data);"
                  },
                  "vars": {},
                  "assertions": [
                    {
                      "name": "res.status",
                      "value": "eq 200",
                      "enabled": true,
                      "uid": "lD0O3YJPd70wfjyybkyd5"
                    }
                  ],
                  "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  const isUUID = (inputString) => {\n    return uuidRegex.test(inputString);\n  };\n  \n  expect(data.hello).to.equal(\"bruno\");\n  expect(isUUID(data.uuid)).to.be.true;\n});\n",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "local modules",
            "filename": "local modules",
            "items": [
              {
                "type": "http",
                "name": "invalid and valid module imports",
                "filename": "invalid and valid module imports.bru",
                "seq": 3,
                "request": {
                  "url": "{{host}}/ping",
                  "method": "GET",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "none",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "try {\n  bru.setVar('invalid_module_error_thrown', false);\n  // should throw an error\n  const invalid = require(\"./lib/invalid\");\n}\ncatch(error) {\n  bru.setVar('invalid_module_error_thrown', true);\n}\n\n\ntry {\n  bru.setVar('valid_module_no_error', true);\n  // should not throw an error\n  const math = require(\"./lib/math\");\n}\ncatch(error) {\n  bru.setVar('valid_module_no_error', false);\n}"
                  },
                  "vars": {},
                  "assertions": [
                    {
                      "name": "invalid_module_error_thrown",
                      "value": "eq true",
                      "enabled": true,
                      "uid": "3imk4DIFjOQdXZL7RKBN0"
                    },
                    {
                      "name": "valid_module_no_error",
                      "value": "eq true",
                      "enabled": true,
                      "uid": "bGJX4qgETYERw2hvg1i3U"
                    }
                  ],
                  "tests": "",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "sum (without js extn)",
                "filename": "sum (without js extn).bru",
                "seq": 2,
                "request": {
                  "url": "{{host}}/api/echo/json",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "json",
                    "json": "{\n  \"a\": 1,\n  \"b\": 2\n}",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "const math = require(\"./lib/math\");\nconsole.log(math, 'math');\n\nconst body = req.getBody();\nbody.sum = math.sum(body.a, body.b);\nbody.areaOfCircle = math.areaOfCircle(2);\n\nreq.setBody(body);"
                  },
                  "vars": {},
                  "assertions": [
                    {
                      "name": "res.status",
                      "value": "eq 200",
                      "enabled": true,
                      "uid": "ckHfAfPNwcmxcCRBrj9sN"
                    }
                  ],
                  "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3,\n    \"areaOfCircle\": 12.56\n  });\n});",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              },
              {
                "type": "http",
                "name": "sum",
                "filename": "sum.bru",
                "seq": 1,
                "request": {
                  "url": "{{host}}/api/echo/json",
                  "method": "POST",
                  "headers": [],
                  "params": [],
                  "body": {
                    "mode": "json",
                    "json": "{\n  \"a\": 1,\n  \"b\": 2\n}",
                    "formUrlEncoded": [],
                    "multipartForm": [],
                    "file": []
                  },
                  "script": {
                    "req": "const math = require(\"./lib/math.js\");  \nconst body = req.getBody();\nbody.sum = math.sum(body.a, body.b);\n\nreq.setBody(body);"
                  },
                  "vars": {},
                  "assertions": [
                    {
                      "name": "res.status",
                      "value": "eq 200",
                      "enabled": true,
                      "uid": "51KAG1UxDubFYXJrXSLCR"
                    }
                  ],
                  "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});\n\ntest(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});\n\ntest(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});",
                  "docs": "",
                  "auth": {
                    "mode": "none"
                  }
                }
              }
            ]
          },
          {
            "type": "folder",
            "name": "inbuilt modules",
            "filename": "inbuilt modules",
            "items": [
              {
                "type": "folder",
                "name": "axios",
                "filename": "axios",
                "items": [
                  {
                    "type": "http",
                    "name": "axios-pre-req-script",
                    "filename": "axios-pre-req-script.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const axios = require(\"axios\");\n\nconst url = \"https://testbench-sanity.usebruno.com/api/echo/json\";\nconst response = await axios.post(url, {\n  \"hello\": \"bruno\"\n});\n\nreq.setBody(response.data);\nreq.setMethod(\"POST\");\nreq.setUrl(url);"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"req.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "cheerio",
                "filename": "cheerio",
                "items": [
                  {
                    "type": "http",
                    "name": "cheerio",
                    "filename": "cheerio.bru",
                    "seq": 1,
                    "request": {
                      "url": "https://echo.usebruno.com",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "text",
                        "text": "<h2 class=\"title\">Hello Bruno!</h2>",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const cheerio = require('cheerio');\n\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n\n$('h2.title').text('Hello there!');\n$('h2').addClass('welcome');\n\nbru.setVar(\"cheerio-test-html\", $.html());"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "const cheerio = require('cheerio');\n\ntest(\"cheerio html - from scripts\", function() {\n  const expected = '<html><head></head><body><h2 class=\"title welcome\">Hello there!</h2></body></html>';\n  const html = bru.getVar('cheerio-test-html');\n  expect(html).to.eql(expected);\n});\n\ntest(\"cheerio html - from tests\", function() {\n  const expected = '<html><head></head><body><h2 class=\"title\">Hello Bruno!</h2></body></html>';\n  const $ = cheerio.load(res.body);\n  expect($.html()).to.eql(expected);\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "crypto-js",
                "filename": "crypto-js",
                "items": [
                  {
                    "type": "http",
                    "name": "crypto-js-pre-request-script",
                    "filename": "crypto-js-pre-request-script.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "var CryptoJS = require(\"crypto-js\");\n\n// Encrypt\nvar ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();\n\n// Decrypt\nvar bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\nvar originalText = bytes.toString(CryptoJS.enc.Utf8);\n\nbru.setVar('crypto-test-message', originalText);"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"crypto message\", function() {\n  const data = bru.getVar('crypto-test-message');\n  bru.setVar('crypto-test-message', null);\n  expect(data).to.eql('my message');\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "nanoid",
                "filename": "nanoid",
                "items": [
                  {
                    "type": "http",
                    "name": "nanoid",
                    "filename": "nanoid.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const { nanoid } = require(\"nanoid\");\n \nbru.setVar(\"nanoid-test-id\", nanoid());"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"nanoid var\", function() {\n  const id = bru.getVar('nanoid-test-id');\n  let isValidNanoid = /^[a-zA-Z0-9_-]{21}$/.test(id)\n  bru.setVar('nanoid-test-id', null);\n  expect(isValidNanoid).to.eql(true);\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "xml2js",
                "filename": "xml2js",
                "items": [
                  {
                    "type": "http",
                    "name": "xml2js",
                    "filename": "xml2js.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "var parseString = require('xml2js').parseString;\nvar xml = \"<root>Hello xml2js!</root>\"\nparseString(xml, function (err, result) {\n   bru.setVar(\"xml2js-test-result\", result); \n});"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "var parseString = require('xml2js').parseString;\n\ntest(\"xml2js parseString in scripts\", function() {\n  const expected = {\n    root: 'Hello xml2js!'\n  };\n  const result = bru.getVar('xml2js-test-result');\n  expect(result).to.eql(expected);\n});\n\ntest(\"xml2js parseString in tests\", async function() {\n  var xml = \"<root>Hello inside test!</root>\"\n  const expected = {\n    root: 'Hello inside test!'\n  };\n  parseString(xml, function (err, result) {\n    expect(result).to.eql(expected);\n  });\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "uuid",
                "filename": "uuid",
                "items": [
                  {
                    "type": "http",
                    "name": "uuid",
                    "filename": "uuid.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const { v4 } = require(\"uuid\");\n \nbru.setVar(\"uuid-test-id\", v4());"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"uuid var\", function() {\n  const id = bru.getVar('uuid-test-id');\n  let isValidUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n  bru.setVar('uuid-test-id', null);\n  expect(isValidUuid).to.eql(true);\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "folder",
            "name": "api",
            "filename": "api",
            "items": [
              {
                "type": "folder",
                "name": "bru",
                "filename": "bru",
                "root": {
                  "request": {
                    "vars": {
                      "req": [
                        {
                          "name": "folder-var",
                          "value": "folder-var-value",
                          "enabled": true,
                          "local": false,
                          "uid": "AqPWEUdm2LylmjMIt3lkw"
                        }
                      ]
                    }
                  },
                  "meta": {
                    "name": "bru"
                  }
                },
                "items": [
                  {
                    "type": "http",
                    "name": "getCollectionVar",
                    "filename": "getCollectionVar.bru",
                    "seq": 9,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get collection var in scripts\", function() {\n  const testVar = bru.getCollectionVar(\"collection-var\");\n  expect(testVar).to.equal(\"collection-var-value\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getEnvName",
                    "filename": "getEnvName.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "const envName = bru.getEnvName();\nbru.setVar(\"testEnvName\", envName);"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get env name in scripts\", function() {\n  const testEnvName = bru.getVar(\"testEnvName\");\n  expect(testEnvName).to.equal(\"Prod\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getEnvVar",
                    "filename": "getEnvVar.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get env var in scripts\", function() {\n  const host = bru.getEnvVar(\"host\")\n  expect(host).to.equal(\"https://testbench-sanity.usebruno.com\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getFolderVar",
                    "filename": "getFolderVar.bru",
                    "seq": 8,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get folder var in scripts\", function() {\n  const testVar = bru.getFolderVar(\"folder-var\");\n  expect(testVar).to.equal(\"folder-var-value\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getProcessEnv",
                    "filename": "getProcessEnv.bru",
                    "seq": 6,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"bru.getProcessEnv()\", function() {\n  const v = bru.getProcessEnv(\"PROC_ENV_VAR\");\n  expect(v).to.equal(\"woof\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getRequestVar",
                    "filename": "getRequestVar.bru",
                    "seq": 7,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {
                        "req": [
                          {
                            "name": "request-var",
                            "value": "request-var-value",
                            "enabled": true,
                            "local": false
                          }
                        ]
                      },
                      "assertions": [],
                      "tests": "test(\"should get request var in scripts\", function() {\n  const testVar = bru.getRequestVar(\"request-var\");\n  expect(testVar).to.equal(\"request-var-value\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getVar",
                    "filename": "getVar.bru",
                    "seq": 5,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get var in scripts\", function() {\n  const testSetVar = bru.getVar(\"testSetVar\");\n  expect(testSetVar).to.equal(\"bruno-test-87267\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "runRequest-1",
                    "filename": "runRequest-1.bru",
                    "seq": 10,
                    "request": {
                      "url": "{{echo-host}}",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "text",
                        "text": "bruno",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "// reset values\nbru.setVar('run-request-runtime-var', null);\nbru.setEnvVar('run-request-env-var', null);\nbru.setGlobalEnvVar('run-request-global-env-var', null);\n\n// the above vars will be set in the below request\nconst resp = await bru.runRequest('scripting/api/bru/runRequest-2');\n\nbru.setVar('run-request-resp', {\n  data: resp?.data,\n  statusText: resp?.statusText,\n  status: resp?.status\n});"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get runtime var set in runRequest-2\", function() {\n  const val = bru.getVar(\"run-request-runtime-var\");\n  expect(val).to.equal(\"run-request-runtime-var-value\");\n});\n\ntest(\"should get env var set in runRequest-2\", function() {\n  const val = bru.getEnvVar(\"run-request-env-var\");\n  expect(val).to.equal(\"run-request-env-var-value\");\n});\n\ntest(\"should get global env var set in runRequest-2\", function() {\n  const val = bru.getGlobalEnvVar(\"run-request-global-env-var\");\n  const executionMode = req.getExecutionMode();\n  if (executionMode == 'runner') {\n    expect(val).to.equal(\"run-request-global-env-var-value\");\n  }\n});\n\ntest(\"should get response of runRequest-2\", function() {\n  const val = bru.getVar('run-request-resp');\n  expect(JSON.stringify(val)).to.equal(JSON.stringify({\n      \"data\": \"bruno\",\n      \"statusText\": \"OK\",\n      \"status\": 200\n    }));\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "runRequest-2",
                    "filename": "runRequest-2.bru",
                    "seq": 11,
                    "request": {
                      "url": "{{echo-host}}",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "text",
                        "text": "bruno",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "bru.setVar('run-request-runtime-var', 'run-request-runtime-var-value');\nbru.setEnvVar('run-request-env-var', 'run-request-env-var-value');\nbru.setGlobalEnvVar('run-request-global-env-var', 'run-request-global-env-var-value');"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "runRequest",
                    "filename": "runRequest.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [
                        {
                          "name": "foo",
                          "value": "bar",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "bru.setVar(\"runRequest-ping-res-1\", null);\nbru.setVar(\"runRequest-ping-res-2\", null);\nbru.setVar(\"runRequest-ping-res-3\", null);\n\nlet pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-1', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});",
                        "res": "let pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-2', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "XiYVLMGIQARuIZRmXYS65"
                        }
                      ],
                      "tests": "const pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-3', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});\n\ntest(\"should run request and return valid response in pre-request script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-1');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n\ntest(\"should run request and return valid response in post-response script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-2');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n\ntest(\"should run request and return valid response in tests script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-3');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setEnvVar",
                    "filename": "setEnvVar.bru",
                    "seq": 3,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "res": "bru.setEnvVar(\"testSetEnvVar\", \"bruno-29653\")"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should set env var in scripts\", function() {\n  const testSetEnvVar = bru.getEnvVar(\"testSetEnvVar\")\n  expect(testSetEnvVar).to.equal(\"bruno-29653\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setVar",
                    "filename": "setVar.bru",
                    "seq": 4,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "res": "bru.setVar(\"testSetVar\", \"bruno-test-87267\")"
                      },
                      "vars": {},
                      "assertions": [],
                      "tests": "test(\"should get var in scripts\", function() {\n  const testSetVar = bru.getVar(\"testSetVar\");\n  expect(testSetVar).to.equal(\"bruno-test-87267\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "folder",
                    "name": "runner",
                    "filename": "runner",
                    "items": [
                      {
                        "type": "http",
                        "name": "1",
                        "filename": "1.bru",
                        "seq": 1,
                        "request": {
                          "url": "https://echo.usebruno.com",
                          "method": "POST",
                          "headers": [],
                          "params": [],
                          "body": {
                            "mode": "none",
                            "formUrlEncoded": [],
                            "multipartForm": [],
                            "file": []
                          },
                          "script": {
                            "req": "bru.setVar('bru-runner-req', 1);",
                            "res": "bru.setVar('bru.runner.skipRequest', true);"
                          },
                          "vars": {},
                          "assertions": [],
                          "tests": "",
                          "docs": "",
                          "auth": {
                            "mode": "none"
                          }
                        }
                      },
                      {
                        "type": "http",
                        "name": "2",
                        "filename": "2.bru",
                        "seq": 2,
                        "request": {
                          "url": "https://echo.usebruno.com",
                          "method": "POST",
                          "headers": [],
                          "params": [],
                          "body": {
                            "mode": "none",
                            "formUrlEncoded": [],
                            "multipartForm": [],
                            "file": []
                          },
                          "script": {
                            "req": "bru.runner.skipRequest();",
                            "res": "bru.setVar('bru.runner.skipRequest', false);"
                          },
                          "vars": {},
                          "assertions": [],
                          "tests": "",
                          "docs": "",
                          "auth": {
                            "mode": "none"
                          }
                        }
                      },
                      {
                        "type": "http",
                        "name": "3",
                        "filename": "3.bru",
                        "seq": 3,
                        "request": {
                          "url": "https://echo.usebruno.com",
                          "method": "POST",
                          "headers": [],
                          "params": [],
                          "body": {
                            "mode": "none",
                            "formUrlEncoded": [],
                            "multipartForm": [],
                            "file": []
                          },
                          "script": {},
                          "vars": {},
                          "assertions": [],
                          "tests": "",
                          "docs": "",
                          "auth": {
                            "mode": "none"
                          }
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "type": "folder",
                "name": "req",
                "filename": "req",
                "items": [
                  {
                    "type": "http",
                    "name": "getBody",
                    "filename": "getBody.bru",
                    "seq": 9,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "YACUsQsYlX6yvIkkHfGeM"
                        }
                      ],
                      "tests": "test(\"req.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getHeader",
                    "filename": "getHeader.bru",
                    "seq": 5,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [
                        {
                          "name": "bruno",
                          "value": "is-awesome",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "1fFLd8VtOZKujvtAkGUZj"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "QD11VDqnqq5jTcL88Y3D1"
                        }
                      ],
                      "tests": "test(\"req.getHeader(name)\", function() {\n  const h = req.getHeader('bruno');\n  expect(h).to.equal(\"is-awesome\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getHeaders",
                    "filename": "getHeaders.bru",
                    "seq": 7,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [
                        {
                          "name": "bruno",
                          "value": "is-awesome",
                          "enabled": true
                        },
                        {
                          "name": "della",
                          "value": "is-beautiful",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "04R4EJbusCqY89KXTKajO"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "CKd1EZjgvkeFB6a25BpDc"
                        }
                      ],
                      "tests": "test(\"req.getHeaders()\", function() {\n  const h = req.getHeaders();\n  expect(h.bruno).to.equal(\"is-awesome\");\n  expect(h.della).to.equal(\"is-beautiful\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getMethod",
                    "filename": "getMethod.bru",
                    "seq": 3,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "5ItoSs1VqOfB0sll7wqpN"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "JdEtqrNa8XTVM8bwHYNLq"
                        }
                      ],
                      "tests": "test(\"req.getMethod()()\", function() {\n  const method = req.getMethod();\n  expect(method).to.equal(\"GET\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getUrl",
                    "filename": "getUrl.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "OkR2RNGAnwkPvXPex4huK"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "T7L4EFpqrauldg2JOGshM"
                        }
                      ],
                      "tests": "test(\"req.getUrl()\", function() {\n  const url = req.getUrl();\n  expect(url).to.equal(\"https://testbench-sanity.usebruno.com/ping\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setBody",
                    "filename": "setBody.bru",
                    "seq": 10,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "req.setBody({\n  \"bruno\": \"is awesome\"\n});"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "1tuWeypKcGgbuLEXYF54S"
                        }
                      ],
                      "tests": "test(\"req.setBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"bruno\": \"is awesome\"\n  });\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setHeader",
                    "filename": "setHeader.bru",
                    "seq": 6,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [
                        {
                          "name": "bruno",
                          "value": "is-awesome",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "req.setHeader('bruno', 'is-the-future');"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "jLHIdvmg0VXn4PLW5Ch3j"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "PLKiqwDU1HsEkwchjyNky"
                        }
                      ],
                      "tests": "test(\"req.setHeader(name)\", function() {\n  const h = req.getHeader('bruno');\n  expect(h).to.equal(\"is-the-future\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setHeaders",
                    "filename": "setHeaders.bru",
                    "seq": 8,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [
                        {
                          "name": "bruno",
                          "value": "is-awesome",
                          "enabled": true
                        },
                        {
                          "name": "della",
                          "value": "is-beautiful",
                          "enabled": true
                        }
                      ],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "req.setHeaders({\n  \"content-type\": \"application/text\",\n  \"transaction-id\": \"foobar\"\n});"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "cFZM1lk0lnaR845ZQscl9"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "Gt07qor0o6lnGiMGvtPF3"
                        }
                      ],
                      "tests": "test(\"req.setHeaders()\", function() {\n  const h = req.getHeaders();\n  expect(h['content-type']).to.equal(\"application/text\");\n  expect(h['transaction-id']).to.equal(\"foobar\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setMethod",
                    "filename": "setMethod.bru",
                    "seq": 4,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "req.setMethod(\"GET\");"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "cJZfmbnZVfdaenvhz4wfq"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "wHTmbMRx9ZYWSZ8QivM8h"
                        }
                      ],
                      "tests": "test(\"req.setMethod()()\", function() {\n  const method = req.getMethod();\n  expect(method).to.equal(\"GET\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "setUrl",
                    "filename": "setUrl.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/ping/invalid",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {
                        "req": "req.setUrl(\"https://testbench-sanity.usebruno.com/ping\");"
                      },
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "rVolqUH1aCO0NurDPCA0T"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "5ynLdeD42v7nQlvI8ORXZ"
                        }
                      ],
                      "tests": "test(\"req.setUrl()\", function() {\n  const url = req.getUrl();\n  expect(url).to.equal(\"https://testbench-sanity.usebruno.com/ping\");\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              },
              {
                "type": "folder",
                "name": "res",
                "filename": "res",
                "items": [
                  {
                    "type": "http",
                    "name": "getBody",
                    "filename": "getBody.bru",
                    "seq": 4,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "QAa35PSfpwk267ompkUyX"
                        }
                      ],
                      "tests": "test(\"res.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getHeader",
                    "filename": "getHeader.bru",
                    "seq": 2,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "QfXtdGakjK897gTqaU4PE"
                        }
                      ],
                      "tests": "test(\"res.getHeader(name)\", function() {\n  const server = res.getHeader('x-powered-by');\n  expect(server).to.eql('Express');\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getHeaders",
                    "filename": "getHeaders.bru",
                    "seq": 3,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "WCmqMcNZlAoJdZ9g2KLVe"
                        }
                      ],
                      "tests": "test(\"res.getHeaders(name)\", function() {\n  const h = res.getHeaders();\n  expect(h['x-powered-by']).to.eql('Express');\n  expect(h['content-length']).to.eql('17');\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getResponseTime",
                    "filename": "getResponseTime.bru",
                    "seq": 5,
                    "request": {
                      "url": "{{host}}/api/echo/json",
                      "method": "POST",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "json",
                        "json": "{\n  \"hello\": \"bruno\"\n}",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "DpDzW3VB5cIFdxtvxe6Og"
                        }
                      ],
                      "tests": "test(\"res.getResponseTime()\", function() {\n  const responseTime = res.getResponseTime();\n  expect(typeof responseTime).to.eql(\"number\");\n  expect(responseTime > 0).to.be.true;\n});\n",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getStatus",
                    "filename": "getStatus.bru",
                    "seq": 1,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.status",
                          "value": "eq 200",
                          "enabled": true,
                          "uid": "9lIBr7KIWkUTYANiSBNAW"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "TnsOCt0EUxB7meZTOkEdb"
                        }
                      ],
                      "tests": "test(\"res.getStatus()\", function() {\n  const status = res.getStatus()\n  expect(status).to.equal(200);\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  },
                  {
                    "type": "http",
                    "name": "getStatusText",
                    "filename": "getStatusText.bru",
                    "seq": 6,
                    "request": {
                      "url": "{{host}}/ping",
                      "method": "GET",
                      "headers": [],
                      "params": [],
                      "body": {
                        "mode": "none",
                        "formUrlEncoded": [],
                        "multipartForm": [],
                        "file": []
                      },
                      "script": {},
                      "vars": {},
                      "assertions": [
                        {
                          "name": "res.statusText",
                          "value": "eq OK",
                          "enabled": true,
                          "uid": "bhhg2wMYFSh060HKl8Vgq"
                        },
                        {
                          "name": "res.body",
                          "value": "eq pong",
                          "enabled": true,
                          "uid": "DTYW4zxmKrtsbPxqn8U5E"
                        }
                      ],
                      "tests": "test(\"res.getStatusText()\", function() {\n  const statusText = res.getStatusText()\n  expect(statusText).to.equal('OK');\n});",
                      "docs": "",
                      "auth": {
                        "mode": "none"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "activeEnvironmentUid": "epJ1gynipcQgb5uJLBHZr",
    "environments": [
      {
        "variables": [
          {
            "name": "host",
            "value": "http://localhost:8080",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "httpfaker",
            "value": "https://www.httpfaker.org",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "bearer_auth_token",
            "value": "your_secret_token",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "basic_auth_password",
            "value": "della",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "env.var1",
            "value": "envVar1",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "env-var2",
            "value": "envVar2",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "bark",
            "value": "{{process.env.PROC_ENV_VAR}}",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "foo",
            "value": "bar",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "testSetEnvVar",
            "value": "bruno-29653",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "echo-host",
            "value": "https://echo.usebruno.com",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "client_id",
            "value": "client_id_1",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "client_secret",
            "value": "client_secret_1",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "auth_url",
            "value": "http://localhost:8080/api/auth/oauth2/authorization_code/authorize",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "callback_url",
            "value": "http://localhost:8080/api/auth/oauth2/authorization_code/callback",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "access_token_url",
            "value": "http://localhost:8080/api/auth/oauth2/authorization_code/token",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "passwordCredentials_username",
            "value": "foo",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "passwordCredentials_password",
            "value": "bar",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "github_authorize_url",
            "value": "https://github.com/login/oauth/authorize",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "github_access_token_url",
            "value": "https://github.com/login/oauth/access_token",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "google_auth_url",
            "value": "https://accounts.google.com/o/oauth2/auth",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "google_access_token_url",
            "value": "https://accounts.google.com/o/oauth2/token",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "google_scope",
            "value": "https://www.googleapis.com/auth/userinfo.email",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "github_client_secret",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "github_client_id",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "google_client_id",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "google_client_secret",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "github_authorization_code",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "passwordCredentials_access_token",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "client_credentials_access_token",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "authorization_code_access_token",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          },
          {
            "name": "github_access_token",
            "value": "",
            "enabled": true,
            "secret": true,
            "type": "text"
          }
        ],
        "name": "Local"
      },
      {
        "variables": [
          {
            "name": "host",
            "value": "https://testbench-sanity.usebruno.com",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "httpfaker",
            "value": "https://www.httpfaker.org",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "bearer_auth_token",
            "value": "your_secret_token",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "basic_auth_password",
            "value": "della",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "env.var1",
            "value": "envVar1",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "env-var2",
            "value": "envVar2",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "bark",
            "value": "{{process.env.PROC_ENV_VAR}}",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "foo",
            "value": "bar",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "testSetEnvVar",
            "value": "bruno-29653",
            "enabled": true,
            "secret": false,
            "type": "text"
          },
          {
            "name": "echo-host",
            "value": "https://echo.usebruno.com",
            "enabled": true,
            "secret": false,
            "type": "text"
          }
        ],
        "name": "Prod"
      }
    ],
    "root": {
      "request": {
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{bearer_auth_token}}"
          }
        },
        "headers": [
          {
            "name": "check",
            "value": "again",
            "enabled": true,
            "uid": "x5ic2SWqv4uOlkzzUaK6u"
          },
          {
            "name": "token",
            "value": "{{collection_pre_var_token}}",
            "enabled": true,
            "uid": "MdFY4Vekah6cfuxuClOCu"
          },
          {
            "name": "collection-header",
            "value": "collection-header-value",
            "enabled": true,
            "uid": "wCrMSPJUrX9QljaY6kadq"
          }
        ],
        "script": {
          "req": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestCollectionScripts = bru.getVar('should-test-collection-scripts');\nif(shouldTestCollectionScripts) {\n bru.setVar('collection-var-set-by-collection-script', 'collection-var-value-set-by-collection-script');\n}"
        },
        "vars": {
          "req": [
            {
              "name": "collection_pre_var",
              "value": "collection_pre_var_value",
              "enabled": true,
              "local": false,
              "uid": "6K19B5ZyhSBTB1ilbx2Sx"
            },
            {
              "name": "collection_pre_var_token",
              "value": "{{request_pre_var_token}}",
              "enabled": true,
              "local": false,
              "uid": "zdoL9ayNeJnNY7ot6RHDj"
            },
            {
              "name": "collection-var",
              "value": "collection-var-value",
              "enabled": true,
              "local": false,
              "uid": "6tgTaZw6HTazsyAMWrVfL"
            }
          ]
        },
        "tests": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestCollectionScripts = bru.getVar('should-test-collection-scripts');\nconst collectionVar = bru.getVar(\"collection-var-set-by-collection-script\");\nif (shouldTestCollectionScripts && collectionVar) {\n  test(\"collection level test - should get the var that was set by the collection script\", function() {\n    expect(collectionVar).to.equal(\"collection-var-value-set-by-collection-script\");\n  }); \n  bru.setVar('collection-var-set-by-collection-script', null); \n  bru.setVar('should-test-collection-scripts', null);\n}"
      },
      "docs": "# bruno-testbench 🐶\n\nThis is a test collection that I am using to test various functionalities around bruno"
    },
    "brunoConfig": {
      "version": "1",
      "name": "bruno-testbench",
      "type": "collection",
      "proxy": {
        "enabled": false,
        "protocol": "http",
        "hostname": "{{proxyHostname}}",
        "port": 4000,
        "auth": {
          "enabled": false,
          "username": "anoop"
        },
        "bypassProxy": ""
      },
      "scripts": {
        "moduleWhitelist": [
          "crypto",
          "buffer",
          "form-data"
        ],
        "filesystemAccess": {
          "allow": true
        }
      },
      "clientCertificates": {
        "enabled": true,
        "certs": []
      },
      "presets": {
        "requestType": "http",
        "requestUrl": "http://localhost:6000"
      },
      "ignore": [
        "node_modules",
        ".git"
      ],
      "size": 0.046390533447265625,
      "filesCount": 104
    }
  }